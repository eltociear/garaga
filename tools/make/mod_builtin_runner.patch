--- tools/make/cairo/lang/builtins/modulo/mod_builtin_runner.py	2024-01-29 13:37:48.949597413 +0100
+++ tools/make/mod_builtin_runner.py	2024-03-02 18:30:10.405569600 +0100
@@ -46,6 +46,8 @@
 INPUT_CELLS = len(INPUT_NAMES)
 ADDITIONAL_MEMORY_UNITS = len(MEMORY_VAR_NAMES)
 
+BASE = 2**96
+
 
 class ModBuiltinRunner(SimpleBuiltinRunner):
     def __init__(self, name: str, included: bool, instance_def: ModInstanceDef):
@@ -73,11 +75,15 @@
         res = set()
         for instance in range(n_instances):
             offsets_ptr_addr = (
-                self.base + instance * self.n_input_cells + INPUT_NAMES.index("offsets_ptr")
+                self.base
+                + instance * self.n_input_cells
+                + INPUT_NAMES.index("offsets_ptr")
             )
             offsets_addr = runner.vm_memory[offsets_ptr_addr]
             values_ptr_addr = (
-                self.base + instance * self.n_input_cells + INPUT_NAMES.index("values_ptr")
+                self.base
+                + instance * self.n_input_cells
+                + INPUT_NAMES.index("values_ptr")
             )
             values_addr = runner.vm_memory[values_ptr_addr]
             for i in range(3 * self.instance_def.batch_size):
@@ -140,7 +146,9 @@
 
         for index, item in res.items():
             for name in INPUT_NAMES:
-                assert name in item, f"Missing input '{name}' of {self.name} instance {index}."
+                assert (
+                    name in item
+                ), f"Missing input '{name}' of {self.name} instance {index}."
             for index_in_batch in range(self.instance_def.batch_size):
                 for name in MEMORY_VAR_NAMES:
                     assert name in item["batch"][index_in_batch], (
@@ -174,10 +182,34 @@
                 + f"2^{self.instance_def.word_bit_len}. Got: {word}."
             )
             words.append(word)
-            value += word * 2 ** (self.instance_def.word_bit_len * i)
+            value += word * BASE**i
 
         return words, value
 
+    def read_value(self, memory, addr) -> Optional[int]:
+        """
+        Reads self.instance_def.n_words from memory, starting at address=addr.
+        Returns the value if all words are in memory.
+        Verifies that all words are integers and are bounded by 2**self.instance_def.word_bit_len.
+        """
+        n_words = self.instance_def.n_words
+        base_power = [BASE**i for i in range(n_words)]  # Pre-compute base powers
+
+        value = 0
+        for i in range(n_words):
+            addr_i = addr + i
+            word = memory.get(addr_i)  # Use .get() to avoid multiple lookups
+            if word is None:
+                return None
+            if not isinstance(word, int) or not (0 <= word < BASE):
+                raise AssertionError(
+                    f"Expected integer at address {addr_i} to be in range [0, {BASE}). "
+                    f"Got: {word}."
+                )
+            value += word * base_power[i]
+
+        return value
+
     def run_security_checks(self, runner, op):
         super().run_security_checks(runner)
         segment_size = runner.segments.get_segment_used_size(self.base.segment_index)
@@ -185,8 +217,13 @@
 
         prev_inputs = None
         for instance in range(n_instances):
-            inputs = self.read_inputs(runner.vm_memory, self.base + instance * self.n_input_cells)
-            if prev_inputs is not None and prev_inputs["n"] > self.instance_def.batch_size:
+            inputs = self.read_inputs(
+                runner.vm_memory, self.base + instance * self.n_input_cells
+            )
+            if (
+                prev_inputs is not None
+                and prev_inputs["n"] > self.instance_def.batch_size
+            ):
                 assert all(
                     inputs[f"p{i}"] == prev_inputs[f"p{i}"]
                     for i in range(self.instance_def.n_words)
@@ -200,9 +237,15 @@
             assert isinstance(inputs["p"], int)
             for index_in_batch in range(self.instance_def.batch_size):
                 values = self.read_memory_vars(
-                    runner.vm_memory, inputs["values_ptr"], inputs["offsets_ptr"], index_in_batch
+                    runner.vm_memory,
+                    inputs["values_ptr"],
+                    inputs["offsets_ptr"],
+                    index_in_batch,
                 )
-                assert op(values["a"], values["b"]) % inputs["p"] == values["c"] % inputs["p"], (
+                assert (
+                    op(values["a"], values["b"]) % inputs["p"]
+                    == values["c"] % inputs["p"]
+                ), (
                     f"{self.name} builtin: Expected a {op} b == c (mod p). Got: "
                     + f"instance={instance}, batch={index_in_batch}, inputs={inputs}, "
                     + f"values={values}."
@@ -233,7 +276,9 @@
             f"{self.name} builtin: Expected integer at address "
             + f"{addr + INPUT_NAMES.index('n')}. Got: {inputs['n']}."
         )
-        assert inputs["n"] >= 1, f"{self.name} builtin: Expected n >= 1. Got: {inputs['n']}."
+        assert (
+            inputs["n"] >= 1
+        ), f"{self.name} builtin: Expected n >= 1. Got: {inputs['n']}."
         p_addr = addr + INPUT_NAMES.index("p0")
         words, value = self.read_n_words_value(memory, p_addr)
         assert (
@@ -244,7 +289,9 @@
             inputs[f"p{d}"] = w
         return inputs
 
-    def read_memory_vars(self, memory, values_ptr, offsets_ptr, index_in_batch) -> Dict[str, int]:
+    def read_memory_vars(
+        self, memory, values_ptr, offsets_ptr, index_in_batch
+    ) -> Dict[str, int]:
         """
         Reads the memory variables to the builtin (see MEMORY_VAR_NAMES) from the memory given
         the inputs (specifically, values_ptr and offsets_ptr).
@@ -292,7 +339,8 @@
         if add_mod and mul_mod:
             assert (
                 add_mod[1].instance_def.n_words == mul_mod[1].instance_def.n_words
-                and add_mod[1].instance_def.word_bit_len == mul_mod[1].instance_def.word_bit_len
+                and add_mod[1].instance_def.word_bit_len
+                == mul_mod[1].instance_def.word_bit_len
             ), f"add_mod and mul_mod builtins must have the same n_words and word_bit_len."
 
         # Fill the inputs to the builtins.
@@ -313,7 +361,9 @@
 
         # Get one of the builtin runners - the rest of this function doesn't depend on batch_size.
         mod_builtin = add_mod if add_mod else mul_mod
-        assert mod_builtin is not None, "At least one of add_mod and mul_mod must be given."
+        assert (
+            mod_builtin is not None
+        ), "At least one of add_mod and mul_mod must be given."
         mod_runner = mod_builtin[1]
         assert isinstance(mod_runner, ModBuiltinRunner)
 
@@ -323,6 +373,7 @@
         add_mod_index = 0
         mul_mod_index = 0
         while add_mod_index < add_mod_n or mul_mod_index < mul_mod_n:
+            # print(f"{add_mod_index=}, {mul_mod_index=}")
             if add_mod_index < add_mod_n and mod_runner.fill_value(
                 memory,
                 add_mod_inputs,
@@ -353,7 +404,9 @@
             instance_ptr = builtin_ptr + instance * len(INPUT_NAMES)
             for i in range(self.instance_def.n_words):
                 memory[instance_ptr + INPUT_NAMES.index(f"p{i}")] = inputs[f"p{i}"]
-            memory[instance_ptr + INPUT_NAMES.index("values_ptr")] = inputs["values_ptr"]
+            memory[instance_ptr + INPUT_NAMES.index("values_ptr")] = inputs[
+                "values_ptr"
+            ]
             memory[instance_ptr + INPUT_NAMES.index("offsets_ptr")] = (
                 inputs["offsets_ptr"] + 3 * instance * self.instance_def.batch_size
             )
@@ -373,14 +426,16 @@
 
     # Fills a value in the values table, if exactly one value is missing.
     # Returns true on success or if all values are already known.
-    def fill_value(self, memory, inputs, index, op, inv_op) -> bool:
+    def fill_value_slow(self, memory, inputs, index, op, inv_op) -> bool:
         values = {}
         addresses = {}
         for i, s in enumerate("abc"):
             s_offset = memory[inputs["offsets_ptr"] + 3 * index + i]
             addresses[s] = inputs["values_ptr"] + s_offset
             if inputs["values_ptr"] + s_offset in memory:
-                _words, value = self.read_n_words_value(memory, inputs["values_ptr"] + s_offset)
+                _words, value = self.read_n_words_value(
+                    memory, inputs["values_ptr"] + s_offset
+                )
                 if value is not None:
                     values[s] = value
 
@@ -406,18 +461,57 @@
 
         return False
 
+    def fill_value(self, memory, inputs, index, op, inv_op) -> bool:
+        offsets_ptr = inputs["offsets_ptr"]
+        values_ptr = inputs["values_ptr"]
+        p = inputs["p"]
+
+        # Pre-compute addresses
+        addresses = (
+            values_ptr + memory[offsets_ptr + 3 * index],
+            values_ptr + memory[offsets_ptr + 3 * index + 1],
+            values_ptr + memory[offsets_ptr + 3 * index + 2],
+        )
+
+        # Attempt to directly access values, minimizing function calls
+        values = [None, None, None]
+        for i, addr in enumerate(addresses):
+            value = self.read_value(memory, addr)
+            if value is not None:
+                values[i] = value
+
+        # Check if all values are known
+        if None not in values:
+            return True
+
+        # Deduce missing values
+        a, b, c = values
+        if a is not None and b is not None and c is None:
+            c = op(a, b) % p
+            self.write_n_words_value(memory, addresses[2], c)
+            return True
+        if a is not None and c is not None and b is None:
+            b = inv_op(c, a) % p
+            self.write_n_words_value(memory, addresses[1], b)
+            return True
+        if b is not None and c is not None and a is None:
+            a = inv_op(c, b) % p
+            self.write_n_words_value(memory, addresses[0], a)
+            return True
+
+        return a is not None and b is not None and c is not None
+
     def write_n_words_value(self, memory, addr, value):
         """
         Given a value, writes its n_words to memory, starting at address=addr.
         """
-        shift = 2**self.instance_def.word_bit_len
         value_copy = value
         for i in range(self.instance_def.n_words):
-            word = value_copy % shift
+            word = value_copy % BASE
             # The following line will raise InconsistentMemoryError if the address is already in
             # memory and a different value is written.
             memory[addr + i] = word
-            value_copy //= shift
+            value_copy //= BASE
         assert value_copy == 0
 
 
